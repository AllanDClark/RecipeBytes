@page "/recipelist"
@inject NavigationManager Navigator

@rendermode InteractiveWebAssembly

@using RecipeBytes.Client.ViewModels
@using RestSharp

<h3>Recipe List</h3>


<div class="container">
    <input class="form-control" id="filter-input" type="text" placeholder="Search..">
    <br />
    @if (_recipes == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 g-4" id="recipe-list">

            @foreach (var recipe in _recipes)
            {
                <div class="col">
                    <div class="card h-100">
                        @if (!string.IsNullOrWhiteSpace(recipe.ImageUrl))
                        {
                            <img src="@recipe.ImageUrl" class="card-img-top" alt="@recipe.Description">
                        }
                        <div class="card-body">
                            <h5 class="card-title">@recipe.Name</h5>
                            <p class="card-text">@recipe.Description</p>
                        </div>
                        <div class="card-footer" style="z-index: 2;">
                            <button type="button" class="btn btn-outline-primary" @onclick="() => DetailsRecipe(recipe.Id)">Details</button>
                            <button type="button" class="btn btn-outline-secondary" @onclick="() => EditRecipe(recipe.Id)">Edit</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="() => DeleteRecipe(recipe.Id)">Delete</button>
                        </div>
                        <a class="stretched-link" @onclick="() => DetailsRecipe(recipe.Id)"></a>
                    </div>
                </div>
            }
        </div>
    }
</div>



@code {

    private List<RecipeViewModel>? _recipes { get; set; }
    private RestClient? _restClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _restClient = new RestClient(Navigator.BaseUri);
        var request = new RestRequest("/api/recipe");
        _recipes = await _restClient.GetAsync<List<RecipeViewModel>>(request);
    }

    public void EditRecipe(Guid id)
    {
        Navigator.NavigateTo($"/editrecipe/{id}");
    }

    public void DetailsRecipe(Guid id)
    {
        Navigator.NavigateTo($"/recipedetails/{id}");
    }

    public async Task DeleteRecipe(Guid id)
    {
        var deleteRequest = new RestRequest($"/api/recipe/{id}", Method.Delete);
        await _restClient!.DeleteAsync(deleteRequest);
        _recipes!.Remove(_recipes.Find(x => x.Id == id)!);
    }
}
